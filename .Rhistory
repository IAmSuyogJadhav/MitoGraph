fit2 <- lm(AvgDegree ~ MitoToCellSurRatio + Media, data=MitoTable)
anova(fit1, fit2)
cv.lm(df=mydata, fit1, m=3) # 3 fold cross-validation
??cv.lm
library(DAAG)
cv.lm(df=mydata, fit1, m=3) # 3 fold cross-validation
cv.lm(df=MitoTable, fit1, m=3) # 3 fold cross-validation
cv <- cv.lm(df=MitoTable, fit1, m=3) # 3 fold cross-validation
cv.lm(df=MitoTable, fit1, m=3) # 3 fold cross-validation
cv <- cv.lm(df=MitoTable, fit1, m=3) # 3 fold cross-validation
cv
cv$cvpred
cv <- cv.lm(df=MitoTable, fit1, m=3) # 3 fold cross-validation
?cv.lm
cv <- cv.lm(df=MitoTable, fit1, m=5) # 3 fold cross-validation
fit <- lm(AvgDegree ~ MitoToCellSurRatio + Type + Media, data=MitoTable)
library(bootstrap)
install.packages("bootstrap")
library(bootstrap)
theta.fit <- function(x,y){lsfit(x,y)}
theta.predict <- function(fit,x){cbind(1,x)%*%fit$coef}
X <- as.matrix(mydata[c("x1","x2","x3")])
X <- as.matrix(MitoTable[c("MitoToCellSurRatio","Type","Media")])
y <- as.matrix(MitoTable[c("AvgDegree")])
results <- crossval(X,y,theta.fit,theta.predict,ngroup=10)
library(MASS)
fit <- lm(AvgDegree ~ MitoToCellSurRatio + Type + Media, data=MitoTable)
step <- stepAIC(fit, direction="both")
step$anova # display results
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type MitoToCellSurRatio*Media + MitoLength, data=MitoTable)
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type MitoToCellSurRatio*Media + MitoLength, data=MitoTable)
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type MitoToCellSurRatio*Media, data=MitoTable)
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media + MitoLength, data=MitoTable)
step <- stepAIC(fit, direction="both")
step$anova # display results
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable)
step <- stepAIC(fit, direction="both")
step$anova # display results
library(leaps)
install.packages("leaps")
library(leaps)
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable,nbest=10)
summary(leaps)
plot(leaps,scale="r2")
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable)
step <- stepAIC(fit, direction="both")
step$anova # display results
# All Subsets Regression
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable,nbest=10)
# view results
summary(leaps)
leaps$first
leaps$xnames
leaps$intercept
leaps$np
leaps$d
leaps$rbar
leaps$thetab
leaps$ress
leaps$ir
leaps$lindep
leaps$call
?leaps
leaps[2]
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable,nbest=1)
leaps
summary(leaps)
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable,nbest=1)
# view results
summary(leaps)
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable,nbest=10)
# view results
summary(leaps)
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable,nbest=6)
# view results
summary(leaps)
plot(leaps,scale="r2")
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable,nbest=6)
# view results
summary(leaps)
# plot a table of models showing variables in each model.
# models are ordered by the selection statistic.
plot(leaps,scale="r2")
plot(leaps,scale="aic")
plot(leaps,scale="bic")
library(relaimpo)
install.packages("relaimpo")
library(relaimpo)
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable)
calc.relimp(fit,type=c("lmg","last","first","pratt"),rela=TRUE)
calc.relimp(fit,type=c("lmg"),rela=TRUE)
impo <- calc.relimp(fit,type=c("lmg"),rela=TRUE)
impo
str(impo)
impo@lmg
boot <- boot.relimp(fit, b = 1000, type = c("lmg"), rank = TRUE, diff = TRUE, rela = TRUE)
boot <- boot.relimp(fit, b = 50, type = c("lmg"), rank = TRUE, diff = TRUE, rela = TRUE)
booteval.relimp(boot) # print result
plot(booteval.relimp(boot,sort=TRUE)) # plot result
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable,nbest=6)
# view results
summary(leaps)
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable)
step <- stepAIC(fit, direction="both")
step$anova # display results
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type + Media, data=MitoTable)
step <- stepAIC(fit, direction="both")
step$anova # display results
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable)
step <- stepAIC(fit, direction="both")
step$anova # display results
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio*Type + MitoToCellSurRatio*Media, data=MitoTable,nbest=6)
# view results
summary(leaps)
plot(leaps,scale="r2")
plot(leaps,scale="bic")
plot(leaps,scale="r2")
fit <- lm(AvgDegree ~ MitoToCellSurRatio * (Type + Media), data=MitoTable)
step <- stepAIC(fit, direction="both")
step$anova # display results
fit <- lm(AvgDegree ~ MitoToCellSurRatio*Type + Media, data=MitoTable)
boot <- boot.relimp(fit, b = 50, type = c("lmg"), rank = TRUE, diff = TRUE, rela = TRUE)
booteval.relimp(boot) # print result
plot(booteval.relimp(boot,sort=TRUE)) # plot result
leaps<-regsubsets(AvgDegree ~ MitoToCellSurRatio * (Type + Media), data=MitoTable,nbest=6)
summary(leaps)
leaps$np
leaps$nrbar
leaps$first
leaps$last
leaps$vorder
str(leaps)
source('/Volumes/TOSH/UCI/MyData/NewScopeUnbudded/Analysis/GenTable.R', echo=TRUE)
ggplot(MitoTable,aes(CellVolume,MitoVolLen,col=interaction(Date,Media))) + geom_point()
ggplot(MitoTable,aes(CellVolume,MitoVolLen,col=interaction(Date,Media))) + geom_point() + geom_smooth(method="lm")
ggplot(MitoTable,aes(CellVolume,MitoVolLen,col=interaction(Type))) + geom_point() + geom_smooth(method="lm")
ggplot(MitoTable,aes(CellVolume,MitoVolLen,col=interaction(Type,Media))) + geom_point() + geom_smooth(method="lm")
ggplot(MitoTable,aes(CellVolume,MitoVolLen,col=interaction(Type,Media,Date))) + geom_point() + geom_smooth(method="lm")
ggplot(MitoTable,aes(MitoToCellSurRatio,avgDegree,col=interaction(Type,Media,Date))) + geom_point() + geom_smooth(method="lm")
M <- subset(MitoTable,interaction(Date,Type,Media)=="24.WT.Glucose")
source('/Volumes/TOSH/UCI/MyData/NewScopeUnbudded/Analysis/GenTable.R', echo=TRUE)
fit1 <- lm(M,CellVolume~MitoVolLen)
fit1 <- lm(data=M,CellVolume~MitoVolLen)
fit2 <- lm(data=M,MitoVolLen~CellVolume)
plot(fit1)
plot(fit2)
fit1$coefficients
fit1$coefficients[1]
sumamry(fit1)
summamy(fit1)
summary(fit1)
q<-summary(fit1)
q
fit1$coefficients[1]
fit1$coefficients[2]
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept = fit1$coefficients[1], slope = fit1$coefficients[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept = fit1$coefficients[1], slope = fit1$coefficients[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_abline(intercept = fit1$coefficients[1], slope = fit1$coefficients[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept = fit1$coefficients[1], slope = fit1$coefficients[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept = 10)
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(aes(intercept = fit1$coefficients[1], slope = fit1$coefficients[2]))
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept=10)
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept=4)
ggplot(M,aes(CellVolume,MitoVolLen,group=1)) + geom_point() + geom_abline(intercept=4)
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point(aes(group=1)) + geom_abline(intercept=4)
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point(aes(group=1)) + geom_abline(intercept=4)
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point() + geom_abline(intercept=4)
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point() + geom_abline(aes(intercept=4))
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point() + geom_abline(aes(slope=4))
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point() + geom_abline(aes(slope=0.4))
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point() + geom_abline(aes(slope=0.1))
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point() + geom_abline(aes(slope=fit1$coefficients[2]))
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point() + geom_abline(aes(slope=fit2$coefficients[2]))
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point() + geom_abline(slope=fit2$coefficients[2])
ggplot(M,aes(x=CellVolume,y=MitoVolLen)) + geom_point() + geom_abline(intercept=fit2$coefficients[1],slope=fit2$coefficients[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept=-c1[1]/c[2],slope=1/c2[2])
fit1 <- lm(data=M,CellVolume~MitoVolLen)
c1 <- fit1$coefficients
fit2 <- lm(data=M,MitoVolLen~CellVolume)
c2 <- fit2$coefficients
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept=-c1[1]/c[2],slope=1/c2[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept=-c1[1]/c2[2],slope=1/c2[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept=c2[1],slope=c2[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() + geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2]) + geom_abline(intercept=c2[1],slope=c2[2])
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2]) +
geom_abline(intercept=c2[1],slope=c2[2]) +
geom_abline(intercept=c2[1],slope=(c1[2]*c2[2]+1)/(2*c1[2]))
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2]) +
geom_abline(intercept=c2[1],slope=c2[2]) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]))
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],type=2)
?geom_abline
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2)
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2) +
geom_abline(intercept=c2[1],slope=c2[2],linetype=2) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]))
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2) +
geom_abline(intercept=c2[1],slope=c2[2],linetype=2) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]),size=2)
library(graphics)
(pc.cr <- princomp(USArrests))  # inappropriate
princomp(USArrests, cor = TRUE) # =^= prcomp(USArrests, scale=TRUE)
summary(pc.cr <- princomp(USArrests, cor = TRUE))
loadings(pc.cr)  # note that blank entries are small but not zero
plot(pc.cr) # shows a screeplot.
biplot(pc.cr)
princomp(~ ., data = USArrests, cor = TRUE)
## NA-handling
USArrests[1, 2] <- NA
pc.cr <- princomp(~ Murder + Assault + UrbanPop,
data = USArrests, na.action = na.exclude, cor = TRUE)
pc.cr$scores[1:5, ]
## (Simple) Robust PCA:
## Classical:
(pc.cl  <- princomp(stackloss))
## Robust:
(pc.rob <- princomp(stackloss, covmat = MASS::cov.rob(stackloss)))
df     <- data.frame(iris)                   # iris dataset
pca    <- prcomp(df[,1:4], retx=T, scale.=T) # scaled pca [exclude species col]
scores <- pca$x[,1:3]                        # scores for first three PC's
# k-means clustering [assume 3 clusters]
km     <- kmeans(scores, centers=3, nstart=5)
ggdata <- data.frame(scores, Cluster=km$cluster, Species=df$Species)
# stat_ellipse is not part of the base ggplot package
source("https://raw.github.com/low-decarie/FAAV/master/r/stat-ellipse.R")
ggplot(ggdata) +
geom_point(aes(x=PC1, y=PC2, color=factor(Cluster)), size=5, shape=20) +
stat_ellipse(aes(x=PC1,y=PC2,fill=factor(Cluster)),
geom="polygon", level=0.95, alpha=0.2) +
guides(color=guide_legend("Cluster"),fill=guide_legend("Cluster"))
source("https://raw.github.com/low-decarie/FAAV/master/r/stat-ellipse.R")
set.seed(101)
n <- 1000
x <- rnorm(n, mean=2)
y <- 1.5 + 0.4*x + rnorm(n)
df <- data.frame(x=x, y=y, group="A")
x <- rnorm(n, mean=2)
y <- 1.5*x + 0.4 + rnorm(n)
df <- rbind(df, data.frame(x=x, y=y, group="B"))
#calculating ellipses
library(ellipse)
df_ell <- data.frame()
install.packages("ellipse")
library(ellipse)
df_ell <- data.frame()
for(g in levels(df$group)){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y),
scale=c(sd(x),sd(y)),
centre=c(mean(x),mean(y))))),group=g))
}
#drawing
library(ggplot2)
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=2)
p <- ggplot(data=df, aes(x=x, y=y,colour=group)) + geom_point(size=1.5, alpha=.6) +
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=2)
df_ell
source_url("https://raw.github.com/JoFrhwld/FAAV/master/r/stat-ellipse.R")
??source_url
install.packages("devtools")
source_url("https://raw.github.com/JoFrhwld/FAAV/master/r/stat-ellipse.R")
library(devtools)
source_url("https://raw.github.com/JoFrhwld/FAAV/master/r/stat-ellipse.R")
set.seed(20130226)
n <- 200
x1 <- rnorm(n, mean = 2)
y1 <- 1.5 + 0.4 * x1 + rnorm(n)
x2 <- rnorm(n, mean = -1)
y2 <- 3.5 - 1.2 * x2 + rnorm(n)
class <- rep(c("A", "B"), each = n)
df <- data.frame(x = c(x1, x2), y = c(y1, y2), colour = class)
# get code for "stat_ellipse"
library(devtools)
library(ggplot2)
source_url("https://raw.github.com/JoFrhwld/FAAV/master/r/stat-ellipse.R")
qplot(data = df, x = x, y = y, colour = class) + stat_ellipse()
qplot(data = M, x = CellVolume, y = MitoVolLen) + stat_ellipse()
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2) +
geom_abline(intercept=c2[1],slope=c2[2],linetype=2) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]),size=2) +
stat_ellipse()
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2) +
geom_abline(intercept=c2[1],slope=c2[2],linetype=2) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]),size=2) +
stat_ellipse(alpha=0.4)
ggplot(M,aes(CellVolume,MitoVolLen)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2) +
geom_abline(intercept=c2[1],slope=c2[2],linetype=2) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]),size=2) +
stat_ellipse(geom = "polygon", alpha = 1/2)
ggplot(MitoTable,aes(CellVolume,MitoVolLen,fill=Media)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2) +
geom_abline(intercept=c2[1],slope=c2[2],linetype=2) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]),size=2) +
stat_ellipse(geom = "polygon", alpha = 1/2)
ggplot(MitoTable,aes(CellVolume,MitoVolLen,col=Media)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2) +
geom_abline(intercept=c2[1],slope=c2[2],linetype=2) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]),size=2) +
stat_ellipse(geom = "polygon", alpha = 1/2)
M <- subset(MitoTable,interaction(Date)=="24")
ggplot(M,aes(CellVolume,MitoVolLen,col=Media)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2) +
geom_abline(intercept=c2[1],slope=c2[2],linetype=2) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]),size=2) +
stat_ellipse(geom = "polygon", alpha = 1/2)
fit1 <- lm(data=M,CellVolume~MitoVolLen*Media)
c1 <- fit1$coefficients
fit2 <- lm(data=M,MitoVolLen~CellVolume*Media)
c2 <- fit2$coefficients
ggplot(M,aes(CellVolume,MitoVolLen,col=Media)) + geom_point() +
geom_abline(intercept=-c1[1]/c1[2],slope=1/c1[2],linetype=2) +
geom_abline(intercept=c2[1],slope=c2[2],linetype=2) +
geom_abline(intercept=0.5*(c2[1]-c1[1]/c1[2]),slope=(c1[2]*c2[2]+1)/(2*c1[2]),size=2) +
stat_ellipse(geom = "polygon", alpha = 1/2)
M <- subset(MitoTable,interaction(Date)=="24")
ggplot(M,aes(CellVolume,MitoVolLen,col=Media)) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2)
M <- subset(MitoTable,interaction(Date)=="00")
ggplot(M,aes(CellVolume,MitoVolLen,col=Media)) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2)
princomp(M,aes(CellVolume,MitoVolLen,col=Media))
?princomp
princomp(~ ., data = USArrests, cor = TRUE)
## NA-handling
USArrests[1, 2] <- NA
pc.cr <- princomp(~ Murder + Assault + UrbanPop,
data = USArrests, na.action=na.exclude, cor = TRUE)
pc.cr$scores[1:5, ]
## (Simple) Robust PCA:
## Classical:
(pc.cl  <- princomp(stackloss))
## Robust:
(pc.rob <- princomp(stackloss, covmat = MASS::cov.rob(stackloss)))
## The variances of the variables in the
## USArrests data vary by orders of magnitude, so scaling is appropriate
(pc.cr <- princomp(USArrests))  # inappropriate
princomp(USArrests, cor = TRUE) # =^= prcomp(USArrests, scale=TRUE)
## Similar, but different:
## The standard deviations differ by a factor of sqrt(49/50)
summary(pc.cr <- princomp(USArrests, cor = TRUE))
loadings(pc.cr)  ## note that blank entries are small but not zero
plot(pc.cr) # shows a screeplot.
biplot(pc.cr)
princomp(USArrests)
princomp(MitoTable)
M <- data.frame(M$CellVolume,M$MitoLength)
princomp(M)
p <- princomp(M)
p$center
p$scale
p$loadings
ld<-p$loadings
ld
summary(ld)
ld
ld@Comp.1
list(ld)
ld[1]
ld[2]
ld[3]
ld[5]
ld[4]
ggplot(M,aes(CellVolume,MitoVolLen,col=Media)) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
geom_smooth(method="lm")
M <- subset(MitoTable,interaction(Date)=="00")
ggplot(M,aes(CellVolume,MitoVolLen,col=Media)) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
geom_smooth(method="lm")
source('/Volumes/TOSH/UCI/MyData/NewScopeUnbudded/Analysis/GenTable.R', echo=TRUE)
source_url("https://raw.github.com/JoFrhwld/FAAV/master/r/stat-ellipse.R")
M <- subset(MitoTable,interaction(Date)=="24")
ggplot(M,aes(CellVolume,MitoVolLen,col=Media)) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
geom_smooth(method="lm")
M <- subset(MitoTable,interaction(Date)=="24")
ggplot(M,aes(CellVolume,MitoVolLen,col=interaction(Media,Type))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
geom_smooth(method="lm")
M <- subset(MitoTable,interaction(Date)=="72")
ggplot(M,aes(CellVolume,MitoVolLen,col=interaction(Media,Type))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
geom_smooth(method="lm")
M <- subset(MitoTable,interaction(Date)!="72")
ggplot(M,aes(CellVolume,MitoVolLen,col=interaction(Media,Type))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
geom_smooth(method="lm")
M <- subset(MitoTable,interaction(Date)=="00")
ggplot(M,aes(CellVolume,MitoVolLen,col=interaction(Media,Type))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
geom_smooth(method="lm")
M <- subset(MitoTable,interaction(Date)=="24")
ggplot(M,aes(CellVolume,MitoVolLen,col=interaction(Media,Type))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
geom_smooth(method="lm")
ggplot(M,aes(CellVolume,MitoVolLen,col=interaction(Media,Type))) + geom_point()
ggplot(M,aes(CellVolume,MitoVolLen,col=interaction(Media,Type))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
geom_smooth(method="lm") +
facet_grid(Media~Type)
ggplot(M,aes(CellVolume,MitoVolLen,col=interaction(Media,Type))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
#geom_smooth(method="lm") +
facet_grid(Media~Type)
ggplot(M,aes(avgDegree,MitoToCellSurRatio,col=interaction(Media,Type))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
#geom_smooth(method="lm") +
facet_grid(Media~Type)
M <- subset(MitoTable,interaction(Date)=="00")
ggplot(M,aes(avgDegree,MitoToCellSurRatio,col=interaction(Media,Type))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
#geom_smooth(method="lm") +
facet_grid(Media~Type)
M <- subset(MitoTable,Date=="00"|Date=="24")
M <- subset(MitoTable,Date=="00"|Date=="24")
ggplot(M,aes(avgDegree,MitoToCellSurRatio,col=interaction(Media,Type,Date))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
#geom_smooth(method="lm") +
facet_grid(Media~Type)
ggplot(M,aes(MitoToCellSurRatio,avgDegree,col=interaction(Media,Type,Date))) + geom_point() +
stat_ellipse(geom = "polygon", alpha = 1/2) +
#geom_smooth(method="lm") +
facet_grid(Media~Type)
source('/Volumes/TOSH/UCI/MyData/NewScopeUnbudded/Analysis/GenTable.R', echo=TRUE)
rm(list=ls())
library(igraph)
library(ggplot2)
library(devtools)
source_url("https://raw.github.com/JoFrhwld/FAAV/master/r/stat-ellipse.R")
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/MitoGraph/")
M <- read.table("RFP-020914_1_40_024.width.width")
M <- read.table("RFP-020914_1_40_024.width")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/MitoGraph/")
M <- read.table("temp2.width",col.names=c("width","intensity"))
setwd("~/GitHub/MitoGraph/")
M <- read.table("temp2.width",col.names=c("id","length",width","intensity"))
M <- read.table("temp2.width",col.names=c("id","length","width","intensity"))
library(ggplot2)
ggplot(M,aes(intensity,width)) + geom_point() + geom_smooth(method="loess")
dim(M)
setwd("~/GitHub/MitoGraph/")
M <- read.table("temp1.width",col.names=c("id","length","width","intensity"))
library(ggplot2)
ggplot(M,aes(intensity,width)) + geom_point() + geom_smooth(method="loess")
ggplot(M,aes(intensity,width,col=as.factor(id))) + geom_point() + geom_smooth(method="loess")
M <- read.table("temp2.width",col.names=c("id","length","width","intensity"))
ggplot(M,aes(intensity,width,col=as.factor(id))) + geom_point() + geom_smooth(method="loess")
ggplot(M,aes(intensity,width,col=length)) + geom_point() + geom_smooth(method="loess")
M
plot(M$width~M$intensity)
M <- read.table("temp2.width",col.names=c("id","length","width","intensity"))
ggplot(M,aes(intensity,width,col=length)) + geom_point() + geom_smooth(method="loess")
mean(M$length)
ggplot(M,aes(intensity,width,col=length)) + geom_point() + geom_smooth(method="lm")
source('~/.active-rstudio-document', echo=TRUE)
mean(M$length)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
M11 <- read.table("temp2.width",col.names=c("id","length","width","intensity"))
M12 <- subset(M11,length > mean(M12$length))
M21 <- read.table("temp2.width",col.names=c("id","length","width","intensity"))
M22 <- subset(M21,length > mean(M21$length))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
f11 <- ggplot(M11,aes(intensity,width,col=length)) + geom_point() + geom_smooth(method="lm") +
scale_x_continuous(limits = c(2500,7500), expand = c(0, 0)) +
scale_y_continuous(limits = c(0.00,0.40), expand = c(0, 0))
grid.arrange(f11,f12,f21,f22,ncol=2,clip=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
f <- lm(M22$width~M22$intensity)
summary(f)
f11 <- summary(f11)
f12 <- summary(f12)
f21 <- summary(f21)
f22 <- summary(f22)
f11 <- summary(f11)
f11
f11 <- lm(M11$width~M11$intensity)
f11
f11 <- summary(f11)
f11
f11$r.squared
f11$adj.r.squared
